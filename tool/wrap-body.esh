# Generates a file with name given in the [first argument]
# by wrapping the contents  of the file given in the [second argument]
# into the wrapper contents of the file given in the [third argument].
#
# The file in the [second argument] should contain Org babel source block
# Dart code, placed between begin_src..end_src.
#
# The wrapper file in the [third argument] should contain the wrapper
# Dart code in ob-dart function 'ob-dart-wrapper'
# or 'ob-dart-with-main-body-wrapper'.
# This wrapper provides a zone to output/not output
# print statements from code in the second argument.

#############################################

#############################################
if ${ not { = {length $*} 4 } } {
    echo "Invalid arguments: $*"
    echo "Usage: $0  gen-file.dart  body.dart  wrapper.dart wrapper-imports.dart"
} {
    if ${ not { file-exists-p $2 || file-exists-p $3 } } {
        echo "File $2 or $3 does not exist."
    } {
        setq gen-file $1
        setq body "${cat $2}"
        setq ob-dart-wrapper "${cat $3}"
        setq ob-dart-wrapper-imports "${cat $4}"

        # todo remove
        #(setq ob-dart-wrapper "ob-dart-wrapper %s code")
        #(setq body "body code")

        # todo 1
        #   split  ob-dart-wrapper to 2 parts and make it function ,
        #         to which we can pass maybeAwait, prefixed before main:
        #     - ob-dart-wrapper-imports
        #     - ob-dart-wrapper(maybeAwait)
        #     - add maybeAwait to all functions in class Gen and returned the conct
        #     - Use https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Format-Strings.html
        #     - Use %w for await replacement
        #     - Use %a for async replacement
        #     maybeAwait is passed as "" here
        #    change the code in ob-dart AND HERE to
        #      append ob-dart-no-main-imports and ob-dart-no-main-body-wrapper(maybeAwait)
        #      before format and redirect to file
        #    Now formatting is like
        #       (format-spec "foo %a bar" '((?a . "await ")) nil t)
        #             â‡’ ("foo " "await " " bar")
        #       so ob-dart-wrapper will have %a and %s, we call it as
        #       (print (format
        #                  ob-dart-wrapper-imports
        #                  (format-spec
        #                    ob-dart-wrapper
        #                    '((?a . "async ") (?w . "await ") (?s . body))
        #                      nil
        #                      t)))
        #    test using generate-dart-from-wrappers-and-bodys and in actual ob-dart
        #
        # todo 2
        # if body does not contain main
        #   setq ob-dart-wrapper  ob-dart-no-main-body-wrapper
        # else
        #   if body contains (maybe) await .* main *(
        #
        #      in body, replace main *( with coreMain *(
        #      pull await into variable maybeAwait
        #      make the ob-dart-no-main-body-wrapper like this:
        #        %s ...class Gen ... runSrc { %s }
        #      the first %s will be replaced with body, the second %s
        #
        #      at the end of the body, add  ob-dart-no-main-body-wrapper(maybeAwait)
        # so now the ob-dart-wrapper
        echo "Inside ./wrap-body.esh : 1"

        echo "file to generate        name:     $gen-file"
        echo "body                    contents: $body"
        echo "ob-dart-wrapper         contents: $ob-dart-wrapper"
        echo "ob-dart-wrapper-imports contents: $ob-dart-wrapper-imports"

        echo "Inside ./wrap-body.esh : 2"

        # check if ob-dart-wrapper contains string %s
        (if (not (string-match-p "\%s" ob-dart-wrapper))
         (error "ob-dart-wrapper: does not contain \%s"))

        echo "Inside ./wrap-body.esh : 3"

        # format string ob-dart-wrapper, substitute body, place to generated file
        # (f-write-text (format ob-dart-wrapper body) 'utf-8 gen-file)
        (f-write-text
           (concat
              ob-dart-wrapper-imports
              (format-spec
                 ob-dart-wrapper
                 `((?a . "async ") (?w . "await ") (?s . ,body))
                 nil    ; ignore-missing
                 nil) ; split to list
              ; "some string"
            )
           'utf-8
           gen-file)
        echo "Inside ./wrap-body.esh : 4 - END"
    }
}

# test wrapping
# $(format-spec "foo %b bar" '((?b . "zot")) nil t)(:j)
# setq body "my body"
# setq ob-dart-wrapper " aa %a ww %w ss %s aa again %a end"
#
#  $(format-spec
#                   ob-dart-wrapper
#                   `((?a . "async ") (?w . "await ") (?s . ,body))
#                   nil
#                   nil)
# NO (:j)
#   aa  async   ww  await   ss  my body  end: command not found

